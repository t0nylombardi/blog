---
import {Icon} from '@iconify/react'

const routes = [
  {
    slug: '/#hello',
    label: '_hello',
  },
  {
    slug: '/#about',
    label: '_about',
  },
  {
    slug: '/#blog',
    label: '_blog',
  },
  {
    slug: '/projects',
    label: '_projects',
  },
  {
    slug: '/resume',
    label: '_resume',
  },
]
---

<script>
  // Hamburger Menu Script
  function setupHamburger() {
    const hamburger = document.querySelector('#hamburger') as HTMLElement
    const links = document.querySelectorAll('#navlinks a')
    const nav = document.querySelector('#navlinks') as HTMLElement
    const bars = hamburger.getElementsByTagName('span')
    const barStyles = {
      active: 'bg-gray-300',
      default: 'bg-[#7790a8]',
    }
    const hamburgerContainerStyles = {
      active: 'border-gray-300',
      default: 'border-[#7790a8]',
    }

    function closeHamburger() {
      nav.classList.add('hidden')
      hamburger.classList.remove(hamburgerContainerStyles.active)
      hamburger.classList.add(hamburgerContainerStyles.default)
      for (const bar of bars) {
        bar.classList.add(barStyles.default)
        bar.classList.remove(barStyles.active)
      }
    }

    function openHamburger() {
      nav.classList.remove('hidden')
      hamburger.classList.add(hamburgerContainerStyles.active)
      hamburger.classList.remove(hamburgerContainerStyles.default)
      for (const bar of bars) {
        bar.classList.add(barStyles.active)
        bar.classList.remove(barStyles.default)
      }
    }

    hamburger.addEventListener('click', () => {
      if (nav.classList.contains('hidden')) {
        openHamburger()
      } else {
        closeHamburger()
      }
    })

    links.forEach((link) =>
      link.addEventListener('click', () => {
        closeHamburger()
      })
    )
  }

  function setupObserver() {
    const changeNav: IntersectionObserverCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && entry.intersectionRatio >= 0.55) {
          let lastActives = document.querySelectorAll('.active')
          if (lastActives) lastActives.forEach((lastActive) => lastActive.classList.remove('active'))
          var id = entry.target.getAttribute('id')
          var newLinks = document.querySelectorAll(`[href="#${id}"]`)
          newLinks.forEach((el) => el.classList.add('active'))
        }
      })
    }

    // init the observer
    const options = {
      threshold: 0.55,
    }

    const observer = new IntersectionObserver(changeNav, options)

    // target the elements to be observed
    let header = document.querySelector('header')
    let sections: any = document.querySelectorAll('section')
    sections = [header, ...sections]

    sections.forEach((section: HTMLElement) => {
      observer.observe(section)
    })
  }

  document.addEventListener('astro:page-load', (ev) => {
    setupHamburger()

    const location = (ev.target as Document).location.toString()
    const pathname = new URL(location).pathname

    if (pathname === '/') {
      setupObserver()
    } else if (pathname.startsWith('/blog')) {
      // Add leading slash to all hrefs in navigationLinks
      const navigationLinks = document.querySelectorAll('#navlinks a')

      navigationLinks.forEach((link) => {
        if (link.getAttribute('href')?.startsWith('#blog')) {
          link.setAttribute('href', '/blog')
        } else if (!link.getAttribute('href')?.startsWith('/')) {
          link.setAttribute('href', '/' + link.getAttribute('href'))
        }
      })

      // Add "active" class to the blog link
      document.querySelector(`[href="/blog"]`)?.classList.add('active')
    }
  })
</script>

<nav class="text-2xl text-ctp-text bg-ctp-base shadow-xl fixed top-0 left-0 right-0 z-50">
  <ul class="flex flex-row justify-between min-w-full relative px-[4rem]">
    <li class="px-8 py-4">
      <a href="/" class="hover:text-ctp-mauve-600">Anthony Lombardi</a>
    </li>

    <li id="navlinks" class="hidden lg:block lg:border-x-0">
      <ul class="flex flex-col lg:flex-row px-8 pb-4 lg:py-4 space-y-1 lg:space-y-0 lg:space-x-8">
        {
          routes.map((route) => (
            <li class="">
              <a href={route.slug} class="flex items-center hover:text-gray-200">
                <Icon icon="bi:chevron-compact-right" />
                {route.label}
              </a>
            </li>
          ))
        }
      </ul>
    </li>

    <li id="hamburger" class="p-2 w-fit cursor-pointer absolute right-6 top-2 lg:hidden rounded-sm">
      <div class="space-y-[0.3rem]">
        <span class="block w-5 h-0.5 bg-[#7790a8]"></span>
        <span class="block w-5 h-0.5 bg-[#7790a8]"></span>
        <span class="block w-3 h-0.5 bg-[#7790a8] ml-auto"></span>
      </div>
    </li>

    <li class="px-8 py-4 hidden lg:block border-r border-[#1E2D3D]">
      <a href="/#contact" class="hover:text-gray-200">_contact-me</a>
    </li>
  </ul>
</nav>

<style>
  #navlinks a {
    transition: all 0.3s ease-in-out;
  }

  #navlinks a:hover {
    color: #95aafb;
  }

  #navlinks a.active {
    color: #95aafb;
    border-bottom: 2px solid #95aafb;
  }

  #hamburger span {
    transition: all 0.3s ease-in-out;
  }

  #hamburger.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  #hamburger.active span:nth-child(2) {
    opacity: 0;
  }

  #hamburger.active span:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
  }
  #hamburger.active {
    border: 2px solid #95aafb;
  }
</style>
